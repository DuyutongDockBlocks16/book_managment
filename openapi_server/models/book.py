from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Book(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, author=None, isbn=None, rating=None, publish_date=None):  # noqa: E501
        """Book - a model defined in OpenAPI

        :param id: The id of this Book.  # noqa: E501
        :type id: str
        :param name: The name of this Book.  # noqa: E501
        :type name: str
        :param author: The author of this Book.  # noqa: E501
        :type author: str
        :param isbn: The isbn of this Book.  # noqa: E501
        :type isbn: str
        :param rating: The rating of this Book.  # noqa: E501
        :type rating: float
        :param publish_date: The publish_date of this Book.  # noqa: E501
        :type publish_date: datetime
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'author': str,
            'isbn': str,
            'rating': float,
            'publish_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'author': 'author',
            'isbn': 'isbn',
            'rating': 'rating',
            'publish_date': 'publish_date'
        }

        self._id = id
        self._name = name
        self._author = author
        self._isbn = isbn
        self._rating = rating
        self._publish_date = publish_date

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Book.


        :return: The id of this Book.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Book.


        :param id: The id of this Book.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Book.


        :return: The name of this Book.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Book.


        :param name: The name of this Book.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def author(self) -> str:
        """Gets the author of this Book.


        :return: The author of this Book.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Book.


        :param author: The author of this Book.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501
        if author is not None and len(author) > 50:
            raise ValueError("Invalid value for `author`, length must be less than or equal to `50`")  # noqa: E501

        self._author = author

    @property
    def isbn(self) -> str:
        """Gets the isbn of this Book.


        :return: The isbn of this Book.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn: str):
        """Sets the isbn of this Book.


        :param isbn: The isbn of this Book.
        :type isbn: str
        """
        if isbn is None:
            raise ValueError("Invalid value for `isbn`, must not be `None`")  # noqa: E501
        if isbn is not None and len(isbn) > 13:
            raise ValueError("Invalid value for `isbn`, length must be less than or equal to `13`")  # noqa: E501
        if isbn is not None and len(isbn) < 13:
            raise ValueError("Invalid value for `isbn`, length must be greater than or equal to `13`")  # noqa: E501

        self._isbn = isbn

    @property
    def rating(self) -> float:
        """Gets the rating of this Book.


        :return: The rating of this Book.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Book.


        :param rating: The rating of this Book.
        :type rating: float
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501
        if rating is not None and rating > 5:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `5`")  # noqa: E501
        if rating is not None and rating < 0:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rating = rating

    @property
    def publish_date(self) -> datetime:
        """Gets the publish_date of this Book.


        :return: The publish_date of this Book.
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date: datetime):
        """Sets the publish_date of this Book.


        :param publish_date: The publish_date of this Book.
        :type publish_date: datetime
        """
        if publish_date is None:
            raise ValueError("Invalid value for `publish_date`, must not be `None`")  # noqa: E501

        self._publish_date = publish_date
